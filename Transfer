from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
import asyncio, random, datetime

app = FastAPI()

# allow frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # change to your frontend URL in real setup
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- Dummy Data ---
CONTAINERS = [f"container-{i:02d}" for i in range(1, 51)]
DATA_HISTORY = {cid: [] for cid in CONTAINERS}

def fake_point():
    return {
        "ts": datetime.datetime.utcnow().isoformat(),
        "cpu_percent": round(random.uniform(20, 90), 2),
        "cpu_avg": round(random.uniform(10, 70), 2),
        "mem_percent": round(random.uniform(30, 95), 2),
        "pids": random.randint(50, 200),
    }

def add_point(container_id: str):
    point = fake_point()
    DATA_HISTORY[container_id].append(point)
    # keep only last 10
    DATA_HISTORY[container_id] = DATA_HISTORY[container_id][-10:]
    return point

# âœ… Pre-fill each container with 10 dummy points at startup
for cid in CONTAINERS:
    for _ in range(10):
        add_point(cid)

@app.get("/api/containers")
async def list_containers():
    """Return list of dummy containers"""
    return CONTAINERS

@app.get("/api/metrics/history")
async def history(container_id: str):
    """Return only last 10 points for a container"""
    return DATA_HISTORY.get(container_id, [])

@app.websocket("/ws/metrics")
async def ws_metrics(ws: WebSocket):
    await ws.accept()
    try:
        while True:
            payload = {}
            # update few random containers each tick
            for cid in random.sample(CONTAINERS, 5):
                point = add_point(cid)
                payload[cid] = [point]
            await ws.send_json({"type": "append", "data": payload})
            await asyncio.sleep(2)
    except WebSocketDisconnect:
        print("client disconnected")
